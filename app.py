import streamlit as st
import cv2
import numpy as np
from PIL import Image
import io
import base64
import torch
from typing import Tuple
from solution import StableHair
from pathlib import Path

path = str(Path(__file__).parent / "configs/hair_transfer.yaml")
@st.cache_resource
def load_model():
    model = StableHair(config=path, weight_dtype=torch.float32)
    return model

# Set page configuration
st.set_page_config(
    page_title="·ª®ng d·ª•ng Gh√©p T√≥c",
    page_icon="üíá",
    layout="wide"
)



def main():
    st.title("üíá ·ª®ng d·ª•ng Gh√©p T√≥c")
    st.markdown("Gh√©p t√≥c t·ª´ ·∫£nh n√†y sang ·∫£nh kh√°c b·∫±ng c√¥ng ngh·ªá th·ªã gi√°c m√°y t√≠nh")
    
    # Initialize hair transfer processor
    # hair_processor = HairTransfer()
    
    # Create two columns for image uploads
    size = st.selectbox(
            "Size image",
            options=[128,256,512, 768, 1024],
            index=0,
            help="Ch·ªçn k√≠ch th∆∞·ªõc"
        )
    col1, col2 = st.columns(2)
    
    # Initialize variables
    source_image = None
    target_image = None
    
    with col1:
        st.subheader("·∫¢nh c·ªßa b·∫°n")
        st.markdown("T·∫£i l√™n ·∫£nh m√† b·∫°n mu·ªën gh√©p t√≥c")
        source_file = st.file_uploader(
            "Ch·ªçn ·∫£nh ngu·ªìn...",
            type=['jpg', 'jpeg', 'png'],
            key="source"
        )
        
        if source_file is not None:
            # QUAN TR·ªåNG: Reset file pointer
            source_file.seek(0)
            source_image = Image.open(source_file)
            
            # Chuy·ªÉn v·ªÅ RGB n·∫øu c·∫ßn
            if source_image.mode != 'RGB':
                source_image = source_image.convert('RGB')
            source_image = source_image.resize((int(size),int(size)))

            st.image(source_image, caption="·∫¢nh Ngu·ªìn", use_container_width=True)

    with col2:
        st.subheader("·∫¢nh c√≥ ki·ªÉu t√≥c")
        st.markdown("T·∫£i l√™n ·∫£nh t√≥c m√† b·∫°n mu·ªën gh√©p")
        target_file = st.file_uploader(
            "Ch·ªçn ·∫£nh ƒë√≠ch...",
            type=['jpg', 'jpeg', 'png'],
            key="target"
        )
        
        if target_file is not None:
            # QUAN TR·ªåNG: Reset file pointer
            target_file.seek(0)
            target_image = Image.open(target_file)
            
            # Chuy·ªÉn v·ªÅ RGB n·∫øu c·∫ßn
            if target_image.mode != 'RGB':
                target_image = target_image.convert('RGB')

            target_image = target_image.resize((int(size),int(size)))
                
            st.image(target_image, caption="·∫¢nh ƒê√≠ch", use_container_width=True)    

    # Always show processing options
    st.markdown("---")
    st.subheader("‚öôÔ∏è T√πy Ch·ªânh Th√¥ng S·ªë")
    model = load_model()
    col3, col4 = st.columns(2)
    col5, col6 = st.columns(2)
    
    with col3:
        random_seed = st.slider(
            "random_seed",
            min_value=-2.0,
            max_value=2.0,
            value=-1.0,
            step=0.1,
            help=""
        )
    
    with col4:
        guidance_scale = st.slider(
            "guidance_scale",
            min_value=0.0,
            max_value=3.0,
            value=1.5,
            step=0.1,
            help=""
        )

    
    with col5:
        controlnet_conditioning_scale = st.slider(
            "controlnet_conditioning_scale",
            min_value=0.0,
            max_value=2.0,
            value=1.0,
            step=0.1,
            help=""
        )
        
    
    # Advanced settings in an expander
    with st.expander("üîß C√†i ƒê·∫∑t N√¢ng Cao"):
        col7, col8 = st.columns(2)
        
        with col7:
            step = st.slider(
                "step",
                min_value=1,
                max_value=50,
                value=20,
                step=1,
                help=""
            )
        
        with col8:
            scale = st.slider(
                "scale",
                min_value=0.0,
                max_value=2.0,
                value=1.2,
                step=0.1,
                help=""
            )
                
    # Processing section
    if source_file is not None and target_file is not None:
        # Process button
        if st.button("üé® Gh√©p T√≥c", type="primary"):
            # try:
            with st.spinner(f"ƒêang x·ª≠ l√Ω ·∫£nh v·ªõi {step} b∆∞·ªõc... Vui l√≤ng ƒë·ª£i m·ªôt ch√∫t."):
                # Validate images
                if source_image is None or target_image is None:
                    st.error("Vui l√≤ng t·∫£i l√™n c·∫£ hai ·∫£nh tr∆∞·ªõc khi x·ª≠ l√Ω")
                    return
                
                source_cv = source_image.convert("RGB").resize((int(size),int(size)))
                target_cv = target_image.convert("RGB").resize((int(size),int(size)))
                
                # Perform hair transfer
                data_new = {     
                    "source_image": source_cv,
                    "reference_image": target_cv,
                    "random_seed": random_seed,
                    "step": step,
                    "guidance_scale": guidance_scale,
                    "controlnet_conditioning_scale": controlnet_conditioning_scale,
                    "scale": scale,
                    "size" : size
                }

                image = model.Hair_Transfer(**data_new)
                print(type(image))
                image_result = (image*255.).astype(np.uint8)
                image_result = cv2.cvtColor(image_result, cv2.COLOR_BGR2RGB)
                # if image_result is not None:
                #     # Convert back to PIL format for display
                try:
                    result_pil = Image.fromarray(cv2.cvtColor(image_result, cv2.COLOR_BGR2RGB))
                    # Hi·ªÉn th·ªã k·∫øt qu·∫£
                    st.success("Gh√©p t√≥c th√†nh c√¥ng!")
                    _, result, __ = st.columns([1,2,1])
                    with result:
                        st.image(result_pil, caption="K·∫øt qu·∫£", use_container_width=True)

                        # Download button
                        buf = io.BytesIO()
                        result_pil.save(buf, format='PNG')
                        byte_im = buf.getvalue()
                        
                        st.download_button(
                            label="üì• T·∫£i Xu·ªëng K·∫øt Qu·∫£",
                            data=byte_im,
                            file_name="ket_qua_ghep_toc.png",
                            mime="image/png"
                        )

                except Exception as e:
                    st.error(f"L·ªói chuy·ªÉn ƒë·ªïi k·∫øt qu·∫£: {str(e)}")
                    st.write(f"Result type: {type(image_result)}")
                    
    else:
        st.info("üëÜ Vui l√≤ng t·∫£i l√™n c·∫£ hai ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu gh√©p t√≥c")
    
if __name__ == "__main__":
    main()
